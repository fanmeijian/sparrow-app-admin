import { InjectionToken } from "@angular/core";
import { BehaviorSubject, merge, map } from "rxjs";
export const TREE_SERVICE = new InjectionToken('treeService');
export class TreeDataSource {
    get data() {
        return this.dataChange.value;
    }
    set data(value) {
        this._treeControl.dataNodes = value;
        this.dataChange.next(value);
    }
    constructor(_treeControl, 
    // private _database: DynamicDatabase,
    treeService) {
        this._treeControl = _treeControl;
        this.treeService = treeService;
        this.dataChange = new BehaviorSubject([]);
        /** 节点缓存：key 为父节点 item，value 为其展开后的子节点列表 */
        this.nodeCache = new Map();
    }
    connect(collectionViewer) {
        this._treeControl.expansionModel.changed.subscribe(change => {
            if (change.added ||
                change.removed) {
                this.handleTreeControl(change);
            }
        });
        return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));
    }
    disconnect(collectionViewer) { }
    /** Handle expand/collapse behaviors */
    handleTreeControl(change) {
        console.log(change);
        if (change.added) {
            change.added.forEach((node) => {
                if (node.sorting) {
                    node.sorting = false;
                }
                else {
                    this.toggleNode(node, true);
                }
            });
        }
        if (change.removed) {
            change.removed
                .slice()
                .reverse()
                .forEach(node => this.toggleNode(node, false));
        }
    }
    /**
     * Toggle the node, remove from display list
     */
    toggleNode(node, expand) {
        const index = this.data.indexOf(node);
        if (expand) {
            console.log(this.nodeCache);
            let children;
            node.isLoading = true;
            const $childrenRequest = this.treeService.getChildren(node);
            $childrenRequest.subscribe((childrenNames) => {
                children = childrenNames;
                if (!children || index < 0)
                    return;
                children.forEach(f => f.level = node.level + 1);
                this.data.splice(index + 1, 0, ...children);
                this.dataChange.next(this.data);
                node.isLoading = false;
                this.nodeCache.set(node.id, children);
            });
        }
        else {
            // 记录要移除的子节点数量
            let count = 0;
            for (let i = index + 1; i < this.data.length && this.data[i].level > node.level; i++, count++) { }
            this.data.splice(index + 1, count);
            this.dataChange.next(this.data);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,